/*******************************************************************　程式名稱：Ach_UTP01.java*　功能說明：下載並轉入本行內部單位 傳送之ACHP01檔案**********************************************************************************************************************************************/public class Ach_UTP01 { Category LOG = Category.getInstance(Ach_UTP01.class.getName());  private String VABID = "";  /** DB 參數*********************/ private SQLBridge bridge   = new SQLBridge(); private SQLBridge bridge1   = new SQLBridge(); private SQLBridge bridge2   = new SQLBridge(); private SQLBridge bridge3   = new SQLBridge(); private Environment appEnv   = null; private String  Stmt   = null; private String dbDriver; private String dbURL; private String dbAcct; private String dbPswd; /** FTP 參數*********************/ private String UNITID  ; private String UNITNAME; private String ACHTYPE ; private String TXID ; private String TBANK ; private String OPID    ; private String OPNAME  ; private String OPEMAIL ; private String FTPIP   ; private String FTPID   ; private String FTPPWD  ; private String FTPIPATH; private String FTPOPATH; private String B2BIPATH; private String B2BOPATH; private String STATUS; private String FILETYPE1; private String SIGN1; /** 檔案欄位參數 **********************/   private String CurrDate; private String Tdate; private String Ttime; private String Sorg; private String Rorg; private String Tcount; private String Tamt; private String Filler1; private String Filler2;  /** 檔案處理參數 **********************/   private int size; private int fi; private String line_str; private int line; private String iFileName;//下傳檔名 private String oFileName;//來源檔名 private int pos; private int pi; private String r1; /** 檢核處理參數 **********************/   private String SQL; private String workset; private int ckline1; private String head_tmp=""; private String head_tmp2=""; private int dline; private int damt; /** 審核處理參數 **********************/   private int Prcs; private int Prcs_mthd; private int Prcs1_need; private int Prcs2_need; private int Prcs3_need; private int Prcs4_need; private int Prcs5_need; private int Prcs6_need; private String prmt; private String valu; private String ls_SQL; private double in_amnt=0; private double out_amnt=0; private double in_count=0; private double out_count=0; private double in_amnt_totl=0; private double out_amnt_totl=0; /** LOG 處理參數 **********************/   private String SQLlog;    /** MAIL處理參數 **********************/ private String mailsubject; private String mailbody; private String SQLmail; private String ACHMail;    public static void main(String[] args) {   Ach_UTP01 service = new Ach_UTP01();  //if (args.length>0) PropertyConfigurator.configure(args[0]);  //else PropertyConfigurator.configure(service.appEnv.getString("log4j.cat"));  if(args.length == 1){   service.VABID = args[0];  }    try {   service.LOG.debug("######## ACH_UTP01 程式執行開始 ########");   service.connectDB();   service.getQuery();   service.LOG.debug("######## ACH_UTP01 程式執行完畢 #########");  } catch (Exception e) {   service.LOG.warn("************* 錯誤訊息 ************");   service.LOG.warn("訊息內容:"+e.toString());   service.LOG.warn("***********************************");   try{   service.prcsMail("ACH 代收代付 FTP 下載提出檔批次 錯誤通知!!",e.toString(),"C");   } catch (Exception E) {   service.LOG.warn(E.toString());   }  } finally {   try {    service.bridge.setSwitch("OFF");    service.bridge1.setSwitch("OFF");    service.bridge2.setSwitch("OFF");    service.bridge3.setSwitch("OFF");   } catch (Exception e) {}  } } public Ach_UTP01() {  this.appEnv  = new Environment("eoi");  this.dbDriver = appEnv.getString("eoic.db.DriverName");  this.dbURL  = appEnv.getString("eoic.db.JdbcURL");  this.dbAcct  = appEnv.getString("eoic.db.UserName");  this.dbPswd  = appEnv.getString("eoic.db.Password");  this.ACHMail    = appEnv.getString("B2bank.ACHADMIN.Mail");  }  private void connectDB() throws SQLException,ClassNotFoundException,Exception{  // --- SQLBridge ------------------------  this.bridge.setDriverName(this.dbDriver);  this.bridge.setJdbcURL(this.dbURL);  this.bridge.setUserName(this.dbAcct);  this.bridge.setPassword(this.dbPswd);  // --- SQLBridge1 ------------------------  this.bridge1.setDriverName(this.dbDriver);  this.bridge1.setJdbcURL(this.dbURL);  this.bridge1.setUserName(this.dbAcct);  this.bridge1.setPassword(this.dbPswd);   // --- SQLBridge2 ------------------------  this.bridge2.setDriverName(this.dbDriver);  this.bridge2.setJdbcURL(this.dbURL);  this.bridge2.setUserName(this.dbAcct);  this.bridge2.setPassword(this.dbPswd);   // --- SQLBridge3 ------------------------  this.bridge3.setDriverName(this.dbDriver);  this.bridge3.setJdbcURL(this.dbURL);  this.bridge3.setUserName(this.dbAcct);  this.bridge3.setPassword(this.dbPswd);         // ---- switch bridge on ----------------  this.bridge.setSwitch("ON");  this.bridge1.setSwitch("ON");  this.bridge2.setSwitch("ON");  this.bridge3.setSwitch("ON");  LOG.debug("1.連接DB成功"); }  private void getQuery() throws SQLException,Exception {    LOG.debug("2.取出 FTP 參數");  // SQL Statement -----------------------  this.Stmt = " SELECT * FROM ACH_TSUNIT WHERE STATUS='1' AND TBANK IN('T','O') AND ACHTYPE<>'AU'";    if(!this.VABID.equals("")){   this.Stmt = this.Stmt + " AND UNITID = '" + this.VABID + "' ";  }    // ---------- excute SQL -------------------------------------  if (this.bridge.execSQL(this.Stmt)!=0) throw new SQLException("Excute query failed when getQuery in Ach_UTP01");    while (this.bridge.nextRow()) {   try {     this.CurrDate = eoi.common.eoiutility.toDBTime(eoiutility.currDateTime());              this.UNITID  = this.bridge.getFieldString(1).trim();     this.UNITNAME= this.bridge.getFieldString(2).trim();     this.ACHTYPE = this.bridge.getFieldString(3);     this.TXID  = this.bridge.getFieldString(4);     this.TBANK  = this.bridge.getFieldString(5);     this.OPID    = this.bridge.getFieldString(6).trim();     this.OPNAME  = this.bridge.getFieldString(7).trim();     this.OPEMAIL = this.bridge.getFieldString(8).trim();     this.FTPIP   = this.bridge.getFieldString(9).trim();     this.FTPID   = this.bridge.getFieldString(10).trim();     this.FTPPWD  = this.bridge.getFieldString(11).trim();      //this.FTPIPATH= this.bridge.getFieldString(12).trim();     this.FTPOPATH= this.bridge.getFieldString(13).trim(); //FTP下傳路徑(Remote)     this.B2BIPATH= this.bridge.getFieldString(14).trim(); //FTP下傳路徑(Local)      //this.B2BOPATH= this.bridge.getFieldString(15).trim();     this.STATUS  = this.bridge.getFieldString(16);     this.FILETYPE1= this.bridge.getFieldString(17);     this.SIGN1  = this.bridge.getFieldString(18);                EXEShell();//資源帳號密碼取回    LOG.debug("■ ("+this.UNITID+")-"+this.TXID+"_"+this.TBANK+"_"+this.UNITNAME);        // ------- Get file From ftp server -----------------------    if (this.getFtp().equals("OK")){     try{     this.Fileimport1();     if(this.line>=3){     // ------- Upload Null file  -----------------------     this.UpNullFile();     // ------- Log -----------------------     //this.TsLog();         }          }catch(Exception e){      LOG.debug("2-3.Fileimport Error"+e.toString());      this.prcsMail("ACH 代收代付 FTP 下載提出檔批次 錯誤通知!!",this.UNITID+"_"+this.TXID+"_"+this.ACHTYPE+"_"+e.toString(),"C");      this.prcsMail("ACH 代收代付 FTP 下載提出檔批次 錯誤通知!!",this.UNITID+"_"+this.TXID+"_"+this.ACHTYPE+"_"+e.getMessage(),"D");     }         }     this.DelFile();   } catch (Exception e) {    throw new Exception(e.toString());   }  } }  private String getFtp() throws Exception {    this.r1="OK";  //***************************************************  //*FILETYPE1 =1 來源端下傳檔名固定  //*FILETYPE1 =2 來源端下傳檔名含當日日期  //***************************************************    FtpClient ftp = new FtpClient();  // --------- set ftp parameter --------------------------  ftp.setFtpIP(this.FTPIP);  ftp.setTimeout(60);  ftp.setUserId(this.FTPID);  ftp.setPassword(this.FTPPWD);  ftp.setLocalPath(this.B2BIPATH);  ftp.setRemotePath(this.FTPOPATH);  try {   // --- connect to ftp server ------------   if(!ftp.getConnect()) {    this.r1="NO";    throw new Exception("2-1.連線 FTP 失敗");   }else{    LOG.debug("2-1.連線 FTP 成功");   }      /***********************************************************   //列出目錄檔案      String FileNames[] = ftp.getFtpFileNames(this.FTPOPATH);   for (int pi=0; pi<FileNames.length; pi++) {    pos = FileNames[pi].lastIndexOf('/');    if (pos != -1) {     FileNames[pi] = FileNames[pi].substring(pos+1);     //LOG.debug(FileNames[pi]);    }    }      ************************************************************/      //設定檔名   if(this.FILETYPE1.equals("1")){    //來源檔名    this.oFileName="ACHP01_"+this.TXID+"_"+this.UNITID.substring(0,8)+".TXT";    //下傳檔名    this.iFileName="ACHP01_"+this.TXID+"_"+this.UNITID.substring(0,8)+"_"+this.TBANK+"_"+this.CurrDate+".TXT";   }else if(this.FILETYPE1.equals("2")){    //來源檔名    this.oFileName="ACHP01_"+this.TXID+"_"+this.UNITID.substring(0,8)+"_"+this.CurrDate.substring(0,8)+".TXT";      //下傳檔名    this.iFileName="ACHP01_"+this.TXID+"_"+this.UNITID.substring(0,8)+"_"+this.TBANK+"_"+this.CurrDate+".TXT";     }      ftp.setRemoteFile(this.oFileName);//來源檔名   ftp.setLocalFile(this.iFileName);//下傳檔名      //開始下載   if(!ftp.getDownload()) {        LOG.debug("2-2.下載檔案失敗");        this.mailsubject="ACH 代收代付 FTP 單位傳檔批次錯誤通知!!";    this.mailbody   ="<font face='Arial' size='2' color='red'>"        +"<b>下載檔案失敗</b><font><br>"        +"<font face='Arial' size='2' color='blue'>"        +"統編    ："+ this.UNITID+"<br>"        +"單位名稱："+ this.UNITNAME+"<br>"        +"交易類型："+ this.ACHTYPE+"(SD:代收 / SC:代付)<br>"        +"交易代號："+ this.TXID+"<br>"        +"行庫別  ："+ this.TBANK+"(O:跨行 / T:自行)<br>"        +"來源檔名  ："+ this.oFileName+"<br>"        +"下傳檔名  ："+ this.iFileName+"<font>";        this.prcsMail(this.mailsubject,this.mailbody,"C");    this.prcsMail(this.mailsubject,this.mailbody,"D");        r1="NO";       }else{    LOG.debug("2-2.下載檔案成功");   }      ftp.getDisconnect();       } catch(Exception e){   r1="NO";   ftp.getDisconnect();   LOG.debug("2-2.下載檔案失敗"+e.toString());     }  return r1; } private void Fileimport1() throws Exception {        FileInputStream fis = null;        FileOutputStream fos = null;        BufferedReader RadrD = null;        Connection con = null;        PreparedStatement stmt= null;        try{            //備份下載檔案-----------------------------------------            try{                byte[] buffer = new byte[4096];                this.size=-1;                this.fi=0;                fis = new FileInputStream(this.B2BIPATH+this.iFileName);                 fos = new FileOutputStream(this.B2BIPATH.substring(0,(this.B2BIPATH.length()-1))+"_bak/"+this.iFileName);                 while ( (size = fis.read(buffer, 0, buffer.length)) != -1 )                {                     fi++;                    fos.write(buffer, 0, size);                 }                 fis.close();                 fos.close();                 fis = null;                 fos = null;                 LOG.debug("備份檔案成功");                } catch (Exception e) {                throw new Exception("備份檔案失敗："+e.toString());            }            //轉入檔案            this.dline=0;            this.damt=0;            this.line=0;            //------ 連結B2B系統的參數 ---------            //con = DriverManager.getConnection(dbURL,dbAcct,dbPswd);            con = DriverManager.getConnection(dbURL, dbAcct, new String(Des.decryptHexString(dbPswd)).trim());            con.setAutoCommit(false);            StringBuffer stbSQL = new StringBuffer();             stbSQL.append("insert into ACH_UPDD "                    +"(Seq_No,Vab_Id,Txtype,Txid,Seq,Pbank,Pclno,Rbank,Rclno,Amt,Rcode,Schd,Cid,Pid,Sid,Pdate,Pseq,Pschd,Note,Filler) "                    +" values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");            stmt= con.prepareStatement(stbSQL.toString());            //取得檔案名稱及路徑            RadrD = new BufferedReader(new FileReader(this.B2BIPATH+this.iFileName));                   while(true){//while Start                this.line_str=RadrD.readLine();                if(this.line_str==null||this.line_str.equals("")) break;                this.line++;                //每行長度檢查檢查 , 取出參數                byte temp[]=this.line_str.getBytes();                if(temp.length!=160){                    throw new Exception("第"+Math.round(this.line)+"行 長度不符");                }                //讀出首筆資料並跳過                if(this.line==1){                    this.Tdate=new String(temp,9,8);                    this.Ttime=new String(temp,17,6);                    this.Sorg =new String(temp,23,7);                    this.Rorg =new String(temp,30,7);                    this.Filler1 =new String(temp,37,123);                    //首筆檢查(入扣帳日期是否為營業日)                    this.SQL="select workset from calendar where wyear='"+(Integer.parseInt(this.Tdate.substring(0,4))+1911)+"' and wmonth='"+this.Tdate.substring(4,6)+"' ";                    if(this.bridge1.execSQL(this.SQL)==0){                        if(this.bridge1.nextRow()){                            this.workset=this.bridge1.getFieldString(1);                             this.workset=this.workset.substring(Integer.parseInt(this.Tdate.substring(6,8))-1,Integer.parseInt(this.Tdate.substring(6,8)));                        }                               }                    if(this.workset.equals("N")){                        throw new Exception("提出處理日期("+(this.Tdate)+")非營業日");                    }                    //首筆檢查(發送單位代號)                    if(!new String(temp,23,3).equals("812")){                        throw new Exception("首筆發送單位代號("+(new String(temp,23,3))+")不符");                    }                       //首筆檢查(接送單位代號)                    if(!new String(temp,30,7).equals("9990250")){                        throw new Exception("首筆接送單位代號("+(new String(temp,30,7))+")不符");                    }                     continue;                   }                //讀出尾筆資料並跳過                if((new String(temp,0,3)).equals("EOF")){                    this.Tcount=new String(temp,31,8);                    this.Tamt=new String(temp,39,16);                    this.Filler2=new String(temp,55,105);                    //末行檢查(處理日期)                    if(Double.parseDouble(new String(temp,9,8))!=Double.parseDouble(this.Tdate)){                        throw new Exception("末筆 處理日期("+(new String(temp,9,8))+")不等於首筆處理日期");                    }                     //末行檢查(發送單位代號)                    if(!new String(temp,17,3).equals("812")){                        throw new Exception("末筆 發送單位代號("+(new String(temp,17,3))+")不符");                    }                                   //末行檢查(接送單位代號)                    if(!new String(temp,24,7).equals("9990250")){                        throw new Exception("末筆 接送單位代號("+(new String(temp,24,7))+")不符");                    }                               break;                }                //1.明細資料檢核                if (!head_tmp.equals(new String(temp,0,6))) {                       //交易型態                    if(!new String(temp,0,1).equals("N")){                        throw new Exception("第"+Math.round(this.line)+"行 明細資料交易型態("+(new String(temp,0,1))+")不符");                    }                    //交易類別                    if(!new String(temp,1,2).equals(this.ACHTYPE)) {                        throw new Exception("第"+Math.round(this.line)+"行 明細資料交易類別("+(new String(temp,1,2))+")不符");                    }                    //交易代號                    if(!new String(temp,3,3).equals(this.TXID)){                        throw new Exception("第"+Math.round(this.line)+"行 明細資料交易代號("+(new String(temp,3,3))+")不符");                    }                }                head_tmp=new String(temp,0,6);                //序號檢查                try{                    ckline1=Integer.parseInt(new String(temp,6,6));                }catch(Exception e){                    throw new Exception("第"+Math.round(this.line)+"行 明細資料序號 數字部份包含了無效字元");                }                                   //入/扣帳行庫別檢查                if(((this.TBANK.equals("O"))&&(new String(temp,33,3).equals("812")))||((this.TBANK.equals("T"))&&(!new String(temp,33,3).equals("812")))){                    throw new Exception("第"+Math.round(this.line)+"行 明細資料入/扣帳行庫別("+new String(temp,33,3)+")不符");                }                //資料發動者統編檢查                if(!new String(temp,67,8).equals(this.UNITID.substring(0,8))){                    throw new Exception("第"+Math.round(this.line)+"行 明細資料發動者統編("+new String(temp,67,8)+")不符");                }                //20161125建北琇雲要求金額不可為0                try{                    if(Integer.valueOf(new String(temp,54,10)) <= 0){                        throw new Exception("第"+Math.round(line)+"行 明細資料金額(" + new String(temp,54,10) + ") 必須大於0");                    }                }catch(Exception e){                    throw new Exception("第"+Math.round(line)+"行 明細資料金額(" + new String(temp,54,10) + ") 必須大於0");                }                if (!head_tmp2.equals(new String(temp,93,15))){                    //原提示交易日期                    if(!new String(temp,93,8).equals("00000000")){                        throw new Exception("第"+Math.round(this.line)+"行 明細資料原提示交易日期 需為 00000000");                    }                           //原提示交易序號                    if(!new String(temp,101,6).equals("000000")){                        throw new Exception("第"+Math.round(this.line)+"行 明細資料原提示交易序號 需為 000000");                    }                           //原提示交換次序                    if(!new String(temp,107,1).equals(" ")){                        throw new Exception("第"+Math.round(this.line)+"行 明細資料原提示交換次序 需為空白");                    }                }                head_tmp2=(new String(temp,93,15));                //2.明細加入batch-----------------------------------------                if((!(new String(temp,0,3)).equals("BOF"))||(!(new String(temp,0,3)).equals("EOF"))){                    stmt.setString(1,this.CurrDate);                    stmt.setString(2,this.UNITID);                    stmt.setString(3,this.ACHTYPE);                    stmt.setString(4,this.TXID);                    stmt.setString(5,new String(temp,6,6));                    stmt.setString(6,new String(temp,12,7));                    stmt.setString(7,new String(temp,19,14));                    stmt.setString(8,new String(temp,33,7));                    stmt.setString(9,new String(temp,40,14));                    stmt.setString(10,new String(temp,54,10));                    stmt.setString(11,new String(temp,64,2));                    stmt.setString(12,new String(temp,66,1));                    stmt.setString(13,new String(temp,67,10));                    stmt.setString(14,new String(temp,77,10));                    stmt.setString(15,new String(temp,87,6));                    stmt.setString(16,new String(temp,93,8));                    stmt.setString(17,new String(temp,101,6));                    stmt.setString(18,new String(temp,107,1));                    stmt.setString(19,new String(temp,108,44));                    stmt.setString(20,new String(temp,152,8));                    stmt.addBatch();                                        this.dline++;                    this.damt=this.damt+Integer.parseInt(new String(temp,54,10));                }               }//while end            //3.轉入檔案            if(this.line>=3){                //總筆數金額檢核                //末行檢查筆數                if(Integer.parseInt(this.Tcount)!=(this.dline)){                    throw new Exception("末筆 明細筆數不符");                }                 //末行檢查金額                if(Integer.parseInt(this.Tamt)!=(this.damt)){                    throw new Exception("末筆 加總金額不符");                }                 try {                       int [] updateCounts = stmt.executeBatch();                    con.commit();                    RadrD.close();                    LOG.debug("2-3.轉入明細成功");                } catch(Exception e){                    stmt.close();                    con.close();                    con.rollback();                    throw new Exception(e.toString());                }finally{                    con.setAutoCommit(true);                    stmt.close();                    con.close();                }                //檢查審核層級                if(this.SIGN1.equals("C")){                    //------須審層級------------------------------------------------------------                    this.Prcs=0;                    this.Prcs_mthd=0;                    this.Prcs1_need=0;                    this.Prcs2_need=0;                    this.Prcs3_need=0;                    this.Prcs4_need=0;                    this.Prcs5_need=0;                    this.Prcs6_need=0;                    this.prmt="";                    this.valu="";                    //一次將該用戶所有的參數取出                    this.ls_SQL=    "SELECT parameter,value"+                            "  FROM usrdat "+                            " WHERE ediid='"+this.UNITID+"'";                    if(this.bridge1.execSQL(this.ls_SQL)==0){                        //比對各參數                        while(this.bridge1.nextRow()){                            this.prmt=this.bridge1.getFieldString(1);                            this.valu=this.bridge1.getFieldString(2);                            //審核方式                            if(this.prmt.equals("VerifyLevel")) this.Prcs_mthd  =Integer.parseInt(this.valu);                            //各層的人數                            if(this.prmt.equals("Checker1"))     this.Prcs1_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Checker2"))     this.Prcs2_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Checker3"))     this.Prcs3_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Checker4"))     this.Prcs4_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Checker5"))     this.Prcs5_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Checker6"))     this.Prcs6_need    =Integer.parseInt(this.valu);                            //各層的金額                            /* 20061012       金額權限單位由新台幣(萬元)改為新台幣(元)       titan                    if(this.prmt.equals("Money1"))   this.Prcs1_need    =Integer.parseInt(this.valu)*10000;                    if(this.prmt.equals("Money2"))   this.Prcs2_need    =Integer.parseInt(this.valu)*10000;                    if(this.prmt.equals("Money3"))   this.Prcs3_need    =Integer.parseInt(this.valu)*10000;                    if(this.prmt.equals("Money4"))   this.Prcs4_need    =Integer.parseInt(this.valu)*10000;                    if(this.prmt.equals("Money5"))   this.Prcs5_need    =Integer.parseInt(this.valu)*10000;                    if(this.prmt.equals("Money6"))   this.Prcs6_need    =Integer.parseInt(this.valu)*10000;                             */                            if(this.prmt.equals("Money1"))   this.Prcs1_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Money2"))   this.Prcs2_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Money3"))   this.Prcs3_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Money4"))   this.Prcs4_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Money5"))   this.Prcs5_need    =Integer.parseInt(this.valu);                            if(this.prmt.equals("Money6"))   this.Prcs6_need    =Integer.parseInt(this.valu);                        }                    }                    //------判斷審核總層級--------------------------------------------------------                    //------0 不控管 -------------------------------------------------------------                    if(this.Prcs_mthd==0){                        this.SIGN1="D";                        this.Prcs=0;                        this.Prcs1_need=0;                        this.Prcs2_need=0;                        this.Prcs3_need=0;                        this.Prcs4_need=0;                        this.Prcs5_need=0;                        this.Prcs6_need=0;                    }                    //------1按人數控管----------------------------------------------------------                    if(this.Prcs_mthd==2){                        if(this.Prcs1_need>0) this.Prcs=1;                        if(this.Prcs2_need>0) this.Prcs=2;                        if(this.Prcs3_need>0) this.Prcs=3;                        if(this.Prcs4_need>0) this.Prcs=4;                        if(this.Prcs5_need>0) this.Prcs=5;                        if(this.Prcs6_need>0) this.Prcs=6;                    }                    //------2按金額控管----------------------------------------------------------                    if(this.Prcs_mthd==1){                        //審核層級                        if((this.in_amnt+this.out_amnt)<=this.Prcs1_need) this.Prcs=1;                        if((this.in_amnt+this.out_amnt)>this.Prcs1_need && this.Prcs1_need!=0)  {                            if (this.Prcs2_need!=0) this.Prcs=2;                            else this.Prcs=1;                        }                        if((this.in_amnt+this.out_amnt)>this.Prcs2_need && this.Prcs2_need!=0)  {                            if (this.Prcs3_need!=0) this.Prcs=3;                            else this.Prcs=2;                        }                        if((this.in_amnt+this.out_amnt)>this.Prcs3_need && this.Prcs3_need!=0)  {                            if (this.Prcs4_need!=0) this.Prcs=4;                            else this.Prcs=3;                        }                        if((this.in_amnt+this.out_amnt)>this.Prcs4_need && this.Prcs4_need!=0)  {                            if (this.Prcs5_need!=0) this.Prcs=5;                            else this.Prcs=4;                        }                        if((this.in_amnt+this.out_amnt)>this.Prcs5_need && this.Prcs5_need!=0)  {                            if (this.Prcs6_need!=0) this.Prcs=6;                            else this.Prcs=5;                        }                        //審核人數，各層都為1人                        this.Prcs1_need=0;                        this.Prcs2_need=0;                        this.Prcs3_need=0;                        this.Prcs4_need=0;                        this.Prcs5_need=0;                        this.Prcs6_need=0;                        //每一層是否要有人審核                        if(this.Prcs>=1) this.Prcs1_need=1;                        if(this.Prcs>=2) this.Prcs2_need=1;                        if(this.Prcs>=3) this.Prcs3_need=1;                        if(this.Prcs>=4) this.Prcs4_need=1;                        if(this.Prcs>=5) this.Prcs5_need=1;                        if(this.Prcs>=6) this.Prcs6_need=1;                    }                   }else{                }                Stmt    =   "INSERT INTO ACH_UPDM (SEQ_NO,VAB_ID,TXTYPE,TXID,TBANK,Tdate,TTIME,SORG,RORG,TCOUNT,TAMT, "                        + "  FILLER1,FILLER2,STTS,UP_CHANNEL,FILE_NAME,FILE_SIZE,OP_ID,OP_DLDATE,"                        + "  PRCS,PRCS1_NEED,PRCS1_FNSH,PRCS2_NEED,PRCS2_FNSH,PRCS3_NEED,"                        + "  PRCS3_FNSH,PRCS4_NEED,PRCS4_FNSH,PRCS5_NEED,PRCS5_FNSH,PRCS6_NEED,PRCS6_FNSH,SIGN_OPT,"                                    + "  SIGN_DATE,SIGN_VALU,SIGN_CSN,VRFY,RJCT)"                        + "  VALUES"                        + "  ('"+ this.CurrDate + "','"                        +   this.UNITID    +"','"                        +   this.ACHTYPE    +"','"                        +   this.TXID      +"','"                        +   this.TBANK     +"','"                        +   this.Tdate     +"','"                        +   this.Ttime     +"','"                        +   this.Sorg      +"','"                        +   this.Rorg      +"','"                        +   this.Tcount    +"','"                        +   this.Tamt      +"','"                        +   this.Filler1   +"','"                        +   this.Filler2   +"','"                        +   this.SIGN1     +"','"                        +   "O"+"','"                        +   this.iFileName +"','"                        +   "" +"','"                        +   this.UNITID  +"','"                        +   "" +"','"                        +   this.Prcs+"','"                        +   this.Prcs1_need+"','"                        +   this.Prcs2_need+"','"                        +   this.Prcs3_need+"','"                        +   this.Prcs4_need+"','"                        +   this.Prcs5_need+"','"                        +   this.Prcs6_need+"','"                        +   "0"+"','"                        +   "0"+"','"                        +   "0"+"','"                        +   "0"+"','"                        +   "0"+"','"                        +   "0"+"','"                        +   this.UNITID  +"','"                        +   this.CurrDate +"','"                        +   "" +"','"                        +   "" +"','"                        +   "" +"','"                        +   "" +"')";                try{                    this.bridge1.setAutoCommit(false);                    if ((this.bridge1.execSQL(Stmt))<1){                        this.bridge1.rollback();                        this.bridge1.setAutoCommit(true);                    }                    this.bridge1.commit();                    this.bridge1.setAutoCommit(true);                    if(this.TBANK.equals("T")){                        this.TBANK="自行";                                    }else if(this.TBANK.equals("O")){                        this.TBANK="跨行";                                    }                    LOG.debug("2-3.轉入主檔成功");                        try{                        this.mailsubject="ACH 代收代付傳檔批次通知!!";                        this.mailbody   ="<font face='Arial' size='2' color='red'>"                                +"<b>傳送成功!!</b><font><br>"                                +"<font face='Arial' size='2' color='blue'>"                                +"統編    ："+ this.UNITID+"<br>"                                +"單位名稱："+ this.UNITNAME+"<br>"                                +"交易類型：" + this.ACHTYPE + " (SD:代收，SC:代付)<br>"                                +"交易代號："+ this.TXID+"<br>"                                +"行庫別  ："+ this.TBANK+"<br>"                                +"傳送筆數  ："+ Integer.parseInt(this.Tcount)+"<br>"                                +"傳送金額  ："+ new java.text.DecimalFormat("#,###,###,###,###,##0").format(Double.parseDouble(this.Tamt))+"<br>"                                +"來源檔名  ："+ this.oFileName+"<br>"                                +"下傳檔名  ："+ this.iFileName+"<font>";                        //通知內部單位人員                        this.prcsMail(this.mailsubject,this.mailbody,"D");                      }catch(Exception e){                        LOG.debug("發送內部單位通知失敗:" + e.getMessage());                    }                     //發送通知======================================================                    if(this.SIGN1.equals("E")){                        //通知作業人員下載                        this.mailsubject="ACH 代收代付【FTP傳送 作業通知】！！";                        this.mailbody = "<font size=2 face='Verdana, Arial, Helvetica, sans-serif' color=#CC0000>"+                                "########請以下相關人員執行作業##########\r\n<br>"+                                "＊自行檔案 由建北分行OP人員處理\r\n<br>"+                                "＊跨行檔案 由作業中心OP人員處理\r\n<br>"+                                "################################</font>\r\n<br>"+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>用戶代碼：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ this.UNITID + "</font>\r\n<br>"+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>用戶名稱：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ this.UNITNAME +"</font>\r\n<br>"+                                     "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>上傳檔案類型：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+this.TBANK+"</font>\r\n<br>"+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>交易序號：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ this.CurrDate +"</font> "+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>交易代號：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ this.TXID+ "</font> " +                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>總筆數：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ Integer.parseInt(this.Tcount) +"</font> "+                                 "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>總金額：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ new java.text.DecimalFormat("##,###,###,###,##0").format(Double.parseDouble(this.Tamt))+"</font>\r\n<br>"+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>上傳時間：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ eoiutility.currDateTime() + "</font>";                        this.prcsMail(this.mailsubject,this.mailbody,"A");                    }else if(this.SIGN1.equals("C")){                        //通知客戶審核放行                        this.mailsubject="台新銀行 ACH 代收代付【FTP傳送 審核放行通知】！！";                        this.mailbody = "<font size=2 face='Verdana, Arial, Helvetica, sans-serif' color=#CC0000>"+                                "###################################################### \r\n<br>"+                                "# 謹通知(企業用戶代碼："+this.UNITID+")，今日:"+this.CurrDate.substring(0,4)+"/"+this.CurrDate.substring(4,6)+"/"+this.CurrDate.substring(6,8)+"\r\n<br>"+                                "# 透過本行企業金融網 B2BANK 進行 ACH 代收代付作業，\r\n<br>"+                                "# 請至<a href='https://www.b2bank.com.tw'>https://www.b2bank.com.tw </a>進行審核放行。\r\n<br>"+                                "###################################################### </font>\r\n<br>"+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>傳送方式：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>FTP 傳送</font>\r\n<br>"+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>用戶代碼：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ this.UNITID + "</font>\r\n<br>"+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>用戶名稱：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ this.UNITNAME +"</font>\r\n<br>"+                                     "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>交易代號：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ this.TXID+ "</font> " +                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>交易序號：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ this.CurrDate +"</font> "+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>總筆數：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ Integer.parseInt(this.Tcount) +"</font> "+                                 "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>總金額：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ new java.text.DecimalFormat("##,###,###,###,##0").format(Double.parseDouble(this.Tamt))+"</font>\r\n<br>"+                                "<font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#000000'>時間：</font><font size=2 face='Verdana, Arial, Helvetica, sans-serif'color='#0000FF'>"+ eoiutility.currDateTime() + "</font>"+                                "<br><br><br><img src='https://www.b2bank.com.tw/b2bank/images/TSBLogo.jpg' width='143' height='27' border='1' ><br><br><font size=2 face='Verdana, Arial, Helvetica, sans-serif' >"+                                "本通知由系統發送，請勿直接以電子郵件回覆。如有問題，請洽本行 <br><br>"+                                this.appEnv.getString("b2bank.contact.deptname")+"<br>TEL："+                                this.appEnv.getString("b2bank.contact.tel")+"<br>FAX："+                                this.appEnv.getString("b2bank.contact.fax")+"</font>";                        this.prcsMail(this.mailsubject,this.mailbody,"B");                    }                    //==============================================================                } catch(Exception e){                    throw new Exception(e.toString());                }                //轉入檔案結束##############################################            }else{                LOG.debug("2-3.空檔無資料");             }        }catch(Exception e){            throw new Exception(e.toString());        }finally{            safeClose(fis);            safeClose(fos);            safeClose(RadrD);            safeClose(con);            safeClose(stmt);        } }  //刪除檔案 private void DelFile() throws Exception {    try{   File delFile = new File(this.B2BIPATH+this.iFileName);   delFile.deleteOnExit();   delFile=null;   LOG.debug("2-4.刪除檔案成功");   } catch (Exception e) {   throw new Exception("DelFile Error :"+e.toString());  }       } //回傳空檔檔案----------------------------------------- private void UpNullFile() throws Exception {  // --------- variable declaration -----------------------  FtpClient ftp1 = new FtpClient();    // --------- essential check ----------------------------  if (this.FTPOPATH==null) throw new Exception("下載參數尚未於資料庫中建檔");  // --------- set ftp parameter --------------------------  ftp1.setFtpIP(this.FTPIP);  ftp1.setTimeout(60);  ftp1.setUserId(this.FTPID);  ftp1.setPassword(this.FTPPWD);  ftp1.setLocalPath(this.B2BIPATH);  ftp1.setRemotePath(this.FTPOPATH);  ftp1.setLocalFile(this.oFileName);  ftp1.setRemoteFile(this.oFileName);    FileWriter NullFilew = null;       try{         //a.產生空檔    File NullFile = new File(this.B2BIPATH+this.oFileName);    NullFile.createNewFile();    NullFilew = new FileWriter(NullFile);    NullFilew.write("");      //b.上傳空檔   ftp1.getConnect();   ftp1.getUpload();     //c.刪除本地端空檔   NullFile.deleteOnExit();   NullFile=null;    ftp1.getDisconnect();      LOG.debug("2-6.回傳空檔成功");    } catch (Exception e) {   throw new Exception("回傳空檔失敗："+e.toString());   }finally{                safeClose(NullFilew);            }  }  //傳檔紀錄 private String TsLog() throws Exception {   try{   this.SQLlog="insert into ach_tsunitlog "    + "(unitseq,unitid,txid,achtype,trantype,stts,file_name) values "   + "('"+this.CurrDate+"','"   +this.UNITID +"','"   +this.TXID +"','"   +this.ACHTYPE +"','"      +"1','1','"   +this.iFileName+"')";      if(this.bridge3.execSQL(this.SQLlog)<1){    return "LogErr";   }else{    LOG.debug("2-6.傳檔紀錄成功");    return "LogOk";    }      } catch (Exception e) {   throw new Exception("TsLog Error :"+e.toString());  }       } //***MAIL通知************************ //Mflag=A 通知作業人員 //Mflag=B 通知客戶審核放行 //Mflag=C 批次作業異常通知系統管理員 //*********************************** private void prcsMail(String subject,String body,String mflag) throws Exception { try{    MailNotc mailnotc = new MailNotc();  mailnotc.setMailServer(this.appEnv.getString("eoic.mail.mailserver"));  mailnotc.setMailUser(this.appEnv.getString("eoi.mail.user"));  mailnotc.setMailPswd(this.appEnv.getString("eoi.mail.password"));  mailnotc.setSubject(subject);    mailnotc.setAuthentic(true);  mailnotc.setCharSet("Big5");  mailnotc.setContentType(MailNotc.HtmlCntnType);  mailnotc.setSender(this.appEnv.getString("eoic.mail.sender"));  mailnotc.setContent(body);        int mailrecv_cnt=0;  if(mflag.equals("A")){  //Mflag=A 通知作業人員   SQLmail ="select  mail from op_mail where achp01='Y' ";   if(this.bridge2.execSQL(SQLmail)==0){    while(bridge2.nextRow()){    mailnotc.addReceiver(bridge2.getFieldString(1).trim());                mailrecv_cnt++;    }   }  }else if(mflag.equals("B")){  //Mflag=B 通知客戶審核放行    SQLmail ="select  email from usropt where ediid='"+this.UNITID+"' and ach_notc='Y' and sign='Y' and email is not null and STATUS!='3' AND STATUS!='4' ";   if(this.bridge2.execSQL(SQLmail)==0){    while(bridge2.nextRow()){    mailnotc.addReceiver(bridge2.getFieldString(1).trim());                mailrecv_cnt++;    }   }  }else if(mflag.equals("C")){   //Mflag=C 批次作業異常通知系統管理員      mailnotc.addReceiver(this.ACHMail);            mailrecv_cnt++;  }else if(mflag.equals("D")){            //通知內部單位人員            if(this.OPEMAIL!=null||!this.OPEMAIL.equals("")){                for (int mi=0;mi<10 ;mi++ ) {//最多10組MAIL                    int s1=this.OPEMAIL.indexOf(";");                    if (s1!=-1) {                        mailnotc.addReceiver(this.OPEMAIL.substring(0,s1));                        mailrecv_cnt++;                        this.OPEMAIL=this.OPEMAIL.substring(s1+1);                                                          }else{                     break;                    }                }                   }                    }  if(mailrecv_cnt>0){   mailnotc.sendMail();  }else{LOG.debug("無收件者不傳送");}  } catch (Exception e) {   throw new Exception("Send Mail Error :"+e.toString());  }     }       public void EXEShell() throws Exception {           Process pl = Runtime.getRuntime().exec("/vab/bin/getUnixFTP.sh "+this.FTPID +" "+this.FTPPWD);           String Shell_line = "";           BufferedReader p_in = new BufferedReader(new InputStreamReader(pl.getInputStream()));           while((Shell_line = p_in.readLine()) != null){                   this.FTPID=Shell_line.substring(0,Shell_line.indexOf(" "));                   this.FTPPWD=Shell_line.substring(Shell_line.indexOf(" ")+1);           }           p_in.close();      }                  private void safeClose(Connection con) {          if (con != null) {              try {                  con.close();              } catch (SQLException e) {                  LOG.debug(e.getMessage());              }          }      }            private void safeClose(PreparedStatement stmt) {          if (stmt != null) {              try {                  stmt.close();              } catch (SQLException e) {                  LOG.debug(e.getMessage());              }          }      }            private void safeClose(FileWriter fw) {          if (fw != null) {              try {                  fw.close();              } catch (IOException e) {                  LOG.debug(e.getMessage());              }          }      }            private void safeClose(FileOutputStream fos) {          if (fos != null) {              try {                  fos.close();              } catch (IOException e) {                  LOG.debug(e.getMessage());              }          }      }      private void safeClose(FileInputStream fis) {          if (fis != null) {              try {                  fis.close();              } catch (IOException e) {                  LOG.debug(e.getMessage());              }          }      }      private void safeClose(BufferedReader br) {          if (br != null) {              try {                  br.close();              } catch (IOException e) {                  LOG.debug(e.getMessage());              }          }      }}
